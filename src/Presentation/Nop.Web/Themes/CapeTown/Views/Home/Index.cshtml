@using Nop.Core.Domain.Seo
@using Nop.Services.Plugins;
@using Nop.Services.Cms;
@using Nop.Core

@inject IWidgetPluginManager widgetPluginManager
@inject IPluginService pluginService;
@inject SeoSettings seoSettings
@inject IStoreContext storeContext

@{
    bool isJcarouselPluginInstall = widgetPluginManager.LoadPluginBySystemNameAsync("NopStation.OCarousels") != null;
    bool isHomepageNewsEnable = widgetPluginManager.LoadPluginBySystemNameAsync("NopStation.BlogNews") != null;
}

@{
    Layout = "_ColumnsOne";

    var homepageTitle = await localizationService.GetLocalizedAsync(await storeContext.GetCurrentStoreAsync(), s => s.HomepageTitle);

    //title
    if (!string.IsNullOrEmpty(homepageTitle))
    {
        NopHtml.AddTitleParts(homepageTitle);
    }

    var homepageDescription = await localizationService.GetLocalizedAsync(await storeContext.GetCurrentStoreAsync(), s => s.HomepageDescription);

    //meta
    if (!string.IsNullOrEmpty(homepageDescription))
    {
        NopHtml.AddMetaDescriptionParts(homepageDescription);
    }

    //page class
    NopHtml.AppendPageCssClassParts("html-home-page");
}

<div class="page home-page">
    <div class="page-body">
        @await Component.InvokeAsync(typeof(WidgetViewComponent), new { widgetZone = PublicWidgetZones.HomepageTop })
        @await Component.InvokeAsync(typeof(TopicBlockViewComponent), new { systemName = "HomepageText" })
        @await Component.InvokeAsync(typeof(WidgetViewComponent), new { widgetZone = PublicWidgetZones.HomepageBeforeCategories })
        @if (!isJcarouselPluginInstall)
        {
            @await Component.InvokeAsync(typeof(HomepageCategoriesViewComponent))
        }
        @await Component.InvokeAsync(typeof(WidgetViewComponent), new { widgetZone = PublicWidgetZones.HomepageBeforeProducts })
        @if (!isJcarouselPluginInstall)
        {
            @await Component.InvokeAsync(typeof(HomepageProductsViewComponent))
        }
        @await Component.InvokeAsync(typeof(WidgetViewComponent), new { widgetZone = PublicWidgetZones.HomepageBeforeBestSellers })
        @await Component.InvokeAsync(typeof(HomepageBestSellersViewComponent))

		        <div class="custom-container homepage-middle-banner">
            <div class="row">
                <div class="col-md-6">
                    @await Component.InvokeAsync(typeof(WidgetViewComponent), new { widgetZone = "capetown_add_left" })
                </div>
                <div class="col-md-6">
                    @await Component.InvokeAsync(typeof(WidgetViewComponent), new { widgetZone = "capetown_add_right" })
                </div>
            </div>
        </div>

        @await Component.InvokeAsync(typeof(WidgetViewComponent), new { widgetZone = PublicWidgetZones.HomepageBeforeNews })
        @if (!isHomepageNewsEnable)
        {
            @await Component.InvokeAsync(typeof(HomepageNewsViewComponent))
        }
        @await Component.InvokeAsync(typeof(WidgetViewComponent), new { widgetZone = PublicWidgetZones.HomepageBeforePoll })
        @await Component.InvokeAsync(typeof(HomepagePollsViewComponent))
        @await Component.InvokeAsync(typeof(WidgetViewComponent), new { widgetZone = PublicWidgetZones.HomepageBottom })
    </div>
</div>
