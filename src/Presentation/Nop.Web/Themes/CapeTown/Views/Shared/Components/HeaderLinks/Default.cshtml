@model HeaderLinksModel
@using Nop.Core.Domain.Seo
@using Nop.Core.Domain.Customers
@using Nop.Services.Customers
@using Nop.Services.Orders
@using Nop.Core.Domain.Orders
@using Nop.Core
@using Nop.Core.Domain.Tax
@using Nop.Services.Catalog
@using Nop.Services.Directory

@inject Nop.Core.IWebHelper webHelper
@inject IStoreContext storeContext
@inject IShoppingCartService shopingCartServices
@inject IWorkContext workContext
@inject SeoSettings seoSettings
@inject ICustomerService customerService
@inject IOrderTotalCalculationService orderTotalCalculationService
@inject Nop.Services.Vendors.IVendorService vendorService
@inject TaxSettings taxSettings
@inject IPriceFormatter priceFormatter
@inject ICurrencyService currencyService

@{
    var currentCustomer = await workContext.GetCurrentCustomerAsync();
    var isRegister = await customerService.IsRegisteredAsync(currentCustomer);
    var cart = await shopingCartServices.GetShoppingCartAsync(await workContext.GetCurrentCustomerAsync(), ShoppingCartType.ShoppingCart, (await storeContext.GetCurrentStoreAsync()).Id);

    var subTotalIncludingTax = await workContext.GetTaxDisplayTypeAsync() == TaxDisplayType.IncludingTax && !taxSettings.ForceTaxExclusionFromOrderSubtotal;
    var (_, _, _, subTotalWithoutDiscountBase, _) = await orderTotalCalculationService.GetShoppingCartSubTotalAsync(cart, subTotalIncludingTax);
    var subtotalBase = subTotalWithoutDiscountBase;
    var subtotal = await currencyService.ConvertFromPrimaryStoreCurrencyAsync(subtotalBase, await workContext.GetWorkingCurrencyAsync());
    var SubTotal = await priceFormatter.FormatPriceAsync(subtotal, false, await workContext.GetWorkingCurrencyAsync(), (await workContext.GetWorkingLanguageAsync()).Id, subTotalIncludingTax);
}

<div class="header-links">
    <ul>
        <li>
            <button href="#" class="search-toggle"></button>
        </li>
        <li class="user-dropdown">
            <div class="dropdown">
                <a class="dropdown-toggle" href="#">user</a>
                <ul class="dropdown-menu">

                    @if (Model.IsAuthenticated)
                    {
                        <li><a href="@Url.RouteUrl("CustomerInfo")" class="ico-account">@T("Account.MyAccount")@*@Model.CustomerName*@</a></li>
                        <li><a href="@Url.RouteUrl("Logout")" class="ico-logout">@T("Account.Logout")</a></li>
                    }
                    else
                    {
                        var returnUrl = Context.Request.Query.TryGetValue("returnUrl", out var url) && !StringValues.IsNullOrEmpty(url)
                        ? url.ToString()
                        : webHelper.GetRawUrl(Context.Request);

                        @if (Model.RegistrationType != UserRegistrationType.Disabled)
                        {
                            <li><a href="@Url.RouteUrl("Register", new { returnUrl })" class="ico-register">@T("Account.Register")</a></li>
                        }
                        <li><a href="@Url.RouteUrl("Login", new { returnUrl })" class="ico-login">@T("Account.Login")</a></li>
                    }

                </ul>
            </div>
        </li>
        @await Component.InvokeAsync(typeof(WidgetViewComponent), new { widgetZone = PublicWidgetZones.HeaderLinksBefore })

        @if (Model.AllowPrivateMessages)
        {
            <li class="inbox inbox-enabled">
                <a href="@Url.RouteUrl("PrivateMessages", new { tab = "" })" class="icon-email">
                    <span class="inbox-label">@T("PrivateMessages.Inbox")</span>
                    <span class="inbox-unread">@Model.UnreadPrivateMessages</span>
                </a>
            </li>
        }
        @if (Model.WishlistEnabled)
        {
            <li class="wishlist wishlist-enabled">
                <a href="@Url.RouteUrl("Wishlist")" class="ico-wishlist">
                    <span class="wishlist-label">@T("Wishlist")</span>
                    <span class="wishlist-qty">@T("Wishlist.HeaderQuantity", Model.WishlistItems)</span>
                </a>
            </li>
        }
        @if (Model.ShoppingCartEnabled)
        {
            <li class="flyout-cart-container">
                @await Component.InvokeAsync(typeof(FlyoutShoppingCartViewComponent))
            </li>
        }
        @await Component.InvokeAsync(typeof(WidgetViewComponent), new { widgetZone = PublicWidgetZones.HeaderLinksAfter })
    </ul>
    @if (Model.AllowPrivateMessages && !string.IsNullOrEmpty(Model.AlertMessage))
    {
        //new private message notification
        <script asp-location="Footer">
            $(document).ready(function () {
                displayPopupNotification('@Html.Raw(JavaScriptEncoder.Default.Encode(Model.AlertMessage))', 'success', false);
            });
        </script>
    }
    @if (Model.ShoppingCartEnabled)
    {
        <script asp-location="Footer">
            $(document).ready(function () {
                $('.header').on('mouseenter', '#topcartlink', function () {
                    $('#flyout-cart').addClass('active');
                });
                $('.header').on('mouseleave', '#topcartlink', function () {
                    $('#flyout-cart').removeClass('active');
                });
                $('.header').on('mouseenter', '#flyout-cart', function () {
                    $('#flyout-cart').addClass('active');
                });
                $('.header').on('mouseleave', '#flyout-cart', function () {
                    $('#flyout-cart').removeClass('active');
                });
            });
        </script>
    }
</div>


<script asp-location="Footer">
    $(document).ready(function () {
        if ($(window).width() <= 991)
        {
            $('.wishlist-enabled').addClass('mm-nav-item');
            $('.wishlist-enabled.mm-nav-item > a').addClass('mm-nav-link')
            $('.wishlist-enabled.mm-nav-item').appendTo('ul.mobile-nav-items');

            $('.inbox-enabled').addClass('mm-nav-item');
            $('.inbox-enabled.mm-nav-item > a').removeClass('icon-email');
            $('.inbox-enabled.mm-nav-item > a').addClass('mm-nav-link')
            $('.inbox-enabled.mm-nav-item').appendTo('ul.mobile-nav-items');
        }
    });
</script>