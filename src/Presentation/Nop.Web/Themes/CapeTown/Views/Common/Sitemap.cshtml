@using Nop.Core.Domain.Common

@model SitemapModel
@inject CommonSettings commonSettings
@{
    Layout = "_ColumnsOne";

    //title
    NopHtml.AddTitleParts(T("PageTitle.Sitemap").Text);
    //page class
    NopHtml.AppendPageCssClassParts("html-sitemap-page");
    var breadcrumbDelimiter = commonSettings.BreadcrumbDelimiter;
}
@section Breadcrumb{
    <div class="breadcrumb">
        <ul>
            <li>
                <span>
                    <a href="@Url.RouteUrl("Homepage")">
                        <span>@T("Products.Breadcrumb.Top")</span>
                    </a>
                </span>
                <span class="delimiter">@breadcrumbDelimiter</span>
            </li>
            <li>
                <span>
                    <a href="@Url.RouteUrl("sitemap")">
                        <strong class="current-item" itemprop="name">@T("Sitemap")</strong>
                    </a>
                </span>

            </li>
        </ul>
    </div>
}
<div class="page sitemap-page">
    @*<div class="page-title">
        <h1>@T("Sitemap")</h1>
    </div>*@
    <div class="page-body">
        <div class="description">
            @T("Sitemap.Description")
        </div>
        @await Component.InvokeAsync(typeof(WidgetViewComponent), new { widgetZone = PublicWidgetZones.SitemapBefore })
        @foreach (var itemGroup in Model.Items.GroupBy(itemGroup => itemGroup.GroupTitle))
        {
            <div class="entity">
                <div class="entity-title">
                    <h2>@itemGroup.Key</h2>
                </div>
                <div class="entity-body">
                    <ul>
                        @foreach (var item in itemGroup.ToList())
                        {
                            <li><a href="@item.Url">@item.Name</a></li>
                        }
                    </ul>
                </div>
            </div>
        }
        @{
            var pager = Html.Pager(Model.PageModel).QueryParam("pagenumber");
            if (!(await pager.IsEmpty()))
            {
                <div class="pager">
                    @pager
                </div>
            }
        }
        @await Component.InvokeAsync(typeof(WidgetViewComponent), new { widgetZone = PublicWidgetZones.SitemapAfter })
    </div>
</div>
