@model LoginModel
@using Nop.Core
@using Nop.Core.Domain.Customers
@using Nop.Core.Domain.Common
@inject CommonSettings commonSettings

@inject IWebHelper webHelper
@{
    Layout = "_ColumnsOne";

    //title
    NopHtml.AddTitleParts(T("PageTitle.Login").Text);
    //page class
    NopHtml.AppendPageCssClassParts("html-login-page");

    //register URL with return URL (if specified)
    var registerUrl = Url.RouteUrl("Register", new { returnUrl = this.Context.Request.Query["returnUrl"] }, webHelper.GetCurrentRequestProtocol());

    var breadcrumbDelimiter = commonSettings.BreadcrumbDelimiter;
}

@section Breadcrumb
{
    <div class="breadcrumb">
        <ul itemscope itemtype="http://schema.org/BreadcrumbList">
            <li>
                <a href="@Url.RouteUrl("Homepage")" title="@T("Categories.Breadcrumb.Top")">@T("Categories.Breadcrumb.Top")</a>
                <span class="delimiter">@breadcrumbDelimiter</span>
            </li>
            <li>
                <h1>@T("Account.Login.Welcome")</h1>
            </li>
        </ul>
    </div>
    @await Component.InvokeAsync(typeof(WidgetViewComponent), new { widgetZone = PublicWidgetZones.CategoryDetailsAfterBreadcrumb, additionalData = Model })
}

<div class="page login-page">
    @*<div class="page-title">
            <h1>@T("Account.Login.Welcome")</h1>
        </div>*@
    @await Html.PartialAsync("_ExternalAuthentication.Errors")
    <div class="container page-body">
        <div class="customer-blocks">
            @if (Model.RegistrationType == UserRegistrationType.Disabled)
            {
                <div class="new-wrapper">
                    <div class="title">
                        @T("Account.Register")
                    </div>
                    <div class="text">
                        @T("Account.Register.Result.Disabled")
                    </div>
                </div>
            }
            else if (Model.CheckoutAsGuest)
            {
        <div class="new-wrapper checkout-as-guest-or-register-block">
            <img class="new-customer-icon" alt="" src="../Themes/CapeTown/Content/images/new-customer.png">
            <div class="title">
                <strong>@T("Account.Login.CheckoutAsGuestOrRegister")</strong>
            </div>
            <div class="text">
                @await Component.InvokeAsync(typeof(TopicBlockViewComponent), new { systemName = "CheckoutAsGuestOrRegister" })
            </div>
            <div class="buttons">
                <button type="button" class="button-1 checkout-as-guest-button" onclick="location.href='@Url.RouteUrl("Checkout")'">@T("Account.Login.CheckoutAsGuest")</button>
                <button type="button" class="button-1 register-button" onclick="location.href='@registerUrl'">@T("Account.Register")</button>
            </div>
        </div>
            }
            else
            {
                <div class="new-wrapper register-block">
                    @*<div class="new-customer-icon">
                            <i class="icon-new-user"></i>
                        </div>*@
                    <img class="new-customer-icon" alt="" src="../Themes/CapeTown/Content/images/new-customer.png">
                    <div class="title">
                        <strong>@T("Account.Login.NewCustomer")</strong>
                    </div>
                    <div class="text">
                        @T("Account.Login.NewCustomerText")
                    </div>
                    <div class="buttons">
                        <button type="button" class="button-1 register-button" onclick="location.href='@registerUrl'">@T("Account.Register")</button>
                    </div>
                </div>
            }
            <div class="returning-wrapper fieldset">
                <form asp-route="Login" asp-route-returnurl="@Context.Request.Query["ReturnUrl"]" method="post" autocomplete="off">
                    <div asp-validation-summary="ModelOnly" class="message-error">@T("Account.Login.Unsuccessful")</div>
                    <div class="returning-icon">
                        <i class="icon-user"></i>
                    </div>
                    <div class="title">
                        @*<span class="returning-icon"></span>*@

                        <strong>@T("Account.Login.ReturningCustomer")</strong>
                    </div>
                    <div class="form-fields">
                        @if (Model.UsernamesEnabled)
                        {
                            <div class="inputs">
                                @*<label asp-for="Username" asp-postfix=":"></label>*@
                                <span><i class="icon-user"></i></span>
                                <input asp-for="Username" class="username" autofocus="autofocus" />
                                <span asp-validation-for="Username"></span>
                            </div>
                        }
                        else
                        {
                            <div class="inputs">
                                @*<label asp-for="Email" asp-postfix=":"></label>*@
                                <span><i class="icon-email"></i></span>
                                <input asp-for="Email"  class="email" autofocus="autofocus" placeholder="EMAIL :" />
                                <span asp-validation-for="Email"></span>
                            </div>
                        }
                        <div class="inputs">
                            @*<label asp-for="Password" asp-postfix=":"></label>*@
                            <span><i class="icon-quick-view"></i></span>
                            <input asp-for="Password"  class="password" placeholder="PASSWORD :" />
                            <span asp-validation-for="Password"></span>
                        </div>
                        <div class="inputs reversed">
                            <div class="d-inline-flex clr-dark custom-checkbox selector">
                                <input asp-for="RememberMe" />
                                <label asp-for="RememberMe"></label>
                            </div>
                            <span class="forgot-password">
                                <a asp-route="PasswordRecovery">@T("Account.Login.ForgotPassword")</a>
                            </span>
                        </div>
                        @if (Model.DisplayCaptcha)
                        {
                            <nop-captcha />
                        }
                    </div>
                    <div class="buttons">
                        <button type="submit" class="button-1 login-button">@T("Account.Login.LoginButton")</button>
                    </div>
                </form>
            </div>
        </div>
        @*<div class="external-authentication">
                @await Component.InvokeAsync(typeof(ExternalMethodsViewComponent), "ExternalAuthentication")
            </div>*@
        @*@await Component.InvokeAsync(typeof(TopicBlockViewComponent), new { systemName = "LoginRegistrationInfo" })*@
    </div>
</div>