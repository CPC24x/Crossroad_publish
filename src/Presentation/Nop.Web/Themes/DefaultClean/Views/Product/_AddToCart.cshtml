@model ProductDetailsModel.AddToCartModel
@using Nop.Core.Domain.Orders
@if (Model.UpdatedShoppingCartItemId > 0)
{
    <input asp-for="UpdatedShoppingCartItemId" type="hidden" />
}
@if (!Model.DisableBuyButton || Model.CustomerEntersPrice)
{
    <div class="add-to-cart">
        @if (Model.CustomerEntersPrice)
        {
            <div class="customer-entered-price">
                <div class="price-input">
                    <label asp-for="CustomerEnteredPrice" asp-postfix=":" class="enter-price-label"></label>
                    @*round price*@
                    <input asp-for="CustomerEnteredPrice" value="@Convert.ToInt32(Math.Ceiling(Model.CustomerEnteredPrice))" class="enter-price-input" />
                </div>
                <div class="price-range">
                    @Model.CustomerEnteredPriceRange
                </div>
            </div>
        }
        @if (!string.IsNullOrEmpty(Model.MinimumQuantityNotification))
        {
            <div class="min-qty-notification">@Model.MinimumQuantityNotification</div>
        }
        @if (!Model.DisableBuyButton)
        {
            <div class="add-to-cart-panel">
                <label asp-for="EnteredQuantity" asp-postfix=":" class="qty-label"></label>
                @if (Model.AllowedQuantities.Count > 0)
                {
                    <select asp-for="EnteredQuantity" :name="'addtocart_'+productDetails.Id+'.EnteredQuantity'" asp-items="Model.AllowedQuantities" :id="'product_enteredQuantity_'+productDetails.Id" class="qty-dropdown" aria-label=@T("Products.Qty.AriaLabel") x-model="enteredQuantity" x-on:change="const data = {productId: productDetails.Id: enteredQuantity};"></select>
                }
                else
                {
                    <input asp-for="EnteredQuantity" :name="'addtocart_'+productDetails.Id+'.EnteredQuantity'" :id="'product_enteredQuantity_'+productDetails.Id" class="qty-input" type="text" aria-label=@T("Products.Qty.AriaLabel") x-model="enteredQuantity" x-on:change="const data = {productId: productDetails.Id,quantity: enteredQuantity};" />
                }
                @{
                    var addToCartText = "";
                    if (Model.UpdatedShoppingCartItemId > 0 && Model.UpdateShoppingCartItemType.HasValue && Model.UpdateShoppingCartItemType.Value == ShoppingCartType.ShoppingCart)
                    {
                        addToCartText = T("ShoppingCart.AddToCart.Update").Text;
                    }
                    else
                    {
                        addToCartText = T("ShoppingCart.AddToCart").Text;
                        if (Model.IsRental)
                        {
                            addToCartText = T("ShoppingCart.Rent").Text;
                        }
                        if (Model.AvailableForPreOrder)
                        {
                            addToCartText = T("ShoppingCart.PreOrder").Text;
                        }
                    }
                            // <button type="button" id="add-to-cart-button-@Model.ProductId" class="btn-1 add-to-cart-button" data-productid="@Model.ProductId" onclick="AjaxCart.addproducttocart_details('@Url.RouteUrl("AddProductToCart-Details", new {productId = Model.ProductId, shoppingCartTypeId = (int) ShoppingCartType.ShoppingCart})', '#product-details-form');return false;">
                    //     <span>@addToCartText</span>
                    // </button>

                    <button type="button" :id="'add-to-cart-button-'+productDetails.Id" class="btn-1 add-to-cart-button" :data-productid="productDetails.Id" x-on:click="AjaxCart.addproducttocart_details('@Url.ActionLink("AddProductToCart_Details","shoppingCart")' + '?productId=' + productDetails.Id + '&shoppingCartTypeId=1', '#product-details-form');return false;">
                        <span>@addToCartText</span>
                    </button>
                }
            </div>
            if (!string.IsNullOrEmpty(Model.PreOrderAvailabilityStartDateTimeUserTime))
            {
                <div class="pre-order-availability-date">
                    <label>@T("ShoppingCart.PreOrderAvailability"):</label>
                    @Html.Raw(Model.PreOrderAvailabilityStartDateTimeUserTime)
                </div>
            }
        }
        @await Component.InvokeAsync(typeof(WidgetViewComponent), new { widgetZone = PublicWidgetZones.ProductDetailsAddInfo, additionalData = Model })
    </div>
}