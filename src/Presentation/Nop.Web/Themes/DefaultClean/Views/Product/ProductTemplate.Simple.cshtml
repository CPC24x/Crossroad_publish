@model ProductDetailsModel

@using Nop.Core
@using Nop.Core.Domain.Catalog
@using Nop.Core.Domain.Seo
@using Nop.Services.Html
@using Nop.Web.BookHelpers


@inject IHtmlFormatter htmlFormatter
@inject IWebHelper webHelper
@inject SeoSettings seoSettings
@inject BookHelpers bookHelpers

@{
    Layout = "_ColumnsOne";

    //title
    NopHtml.AddTitleParts(!string.IsNullOrEmpty(Model.MetaTitle) ? Model.MetaTitle : Model.Name);
    //meta
    NopHtml.AddMetaDescriptionParts(Model.MetaDescription);
    NopHtml.AddMetaKeywordParts(Model.MetaKeywords);
    //page class
    NopHtml.AppendPageCssClassParts("html-product-details-page");

    //canonical URL
    if (seoSettings.CanonicalUrlsEnabled)
    {
        var productUrl = Url.RouteUrl<Product>(new { SeName = Model.SeName }, webHelper.GetCurrentRequestProtocol()).ToLowerInvariant();
        NopHtml.AddCanonicalUrlParts(productUrl, seoSettings.QueryStringInCanonicalUrlsEnabled);
    }

    //open graph META tags
    if (seoSettings.OpenGraphMetaTags)
    {
        NopHtml.AddHeadCustomParts("<meta property=\"og:type\" content=\"product\" />");
        NopHtml.AddHeadCustomParts("<meta property=\"og:title\" content=\"" + Html.Encode(Model.Name) + "\" />");
        NopHtml.AddHeadCustomParts("<meta property=\"og:description\" content=\"" + Html.Encode(htmlFormatter.StripTags(Model.MetaDescription)) + "\" />");
        NopHtml.AddHeadCustomParts("<meta property=\"og:image\" content=\"" + Model.DefaultPictureModel.ImageUrl + "\" />");
        NopHtml.AddHeadCustomParts("<meta property=\"og:image:url\" content=\"" + Model.DefaultPictureModel.ImageUrl + "\" />");
        NopHtml.AddHeadCustomParts("<meta property=\"og:url\" content=\"" + webHelper.GetThisPageUrl(false) + "\" />");
        NopHtml.AddHeadCustomParts("<meta property=\"og:site_name\" content=\"" + Html.Encode(Model.CurrentStoreName) + "\" />");
    }

    //Twitter META tags
    if (seoSettings.TwitterMetaTags)
    {
        NopHtml.AddHeadCustomParts("<meta property=\"twitter:card\" content=\"summary\" />");
        NopHtml.AddHeadCustomParts("<meta property=\"twitter:site\" content=\"" + Html.Encode(Model.CurrentStoreName) + "\" />");
        NopHtml.AddHeadCustomParts("<meta property=\"twitter:title\" content=\"" + Html.Encode(Model.Name) + "\" />");
        NopHtml.AddHeadCustomParts("<meta property=\"twitter:description\" content=\"" + Html.Encode(htmlFormatter.StripTags(Model.MetaDescription)) + "\" />");
        NopHtml.AddHeadCustomParts("<meta property=\"twitter:image\" content=\"" + Model.DefaultPictureModel.ImageUrl + "\" />");
        NopHtml.AddHeadCustomParts("<meta property=\"twitter:url\" content=\"" + webHelper.GetThisPageUrl(false) + "\" />");
    }
}
@* <!--product breadcrumb-->
@section Breadcrumb
{
    @await Html.PartialAsync("_ProductBreadcrumb", Model.Breadcrumb)
} *@

@{
    async Task ProductSpecificationAttribute(string specificationAttributeName)
    {
        var (name, value) = await bookHelpers.GetProductSpecificationAttributeAsync(Model.Id, specificationAttributeName);
        <li hide-empty="@name"><strong>@name : </strong>@value</li>
    }
}
@await Component.InvokeAsync(typeof(WidgetViewComponent), new { widgetZone = PublicWidgetZones.ProductDetailsAfterBreadcrumb, additionalData = Model })
<div class="page product-details-page">
    <div class="page-body">
        @await Component.InvokeAsync(typeof(WidgetViewComponent), new { widgetZone = PublicWidgetZones.ProductDetailsTop, additionalData = Model })
        <form asp-route="Product" asp-route-sename="@Model.SeName" method="post" id="product-details-form">
            @if (seoSettings.MicrodataEnabled)
            {
                @await Html.PartialAsync("_Microdata", Model)
            }
            <div data-productid="@Model.Id">
                <div class="product-essential">
                    @await Component.InvokeAsync(typeof(WidgetViewComponent), new { widgetZone = PublicWidgetZones.ProductDetailsEssentialTop, additionalData = Model })
                    <div class="gallery">
                        <!--product pictures-->
                        @await Html.PartialAsync("_ProductDetailsPictures", Model)
                        <!--product videos-->
                        @await Html.PartialAsync("_ProductDetailsVideos", Model)
                    </div>
                    <div class="overview">
                        <!--manufacturers-->
                        @await Html.PartialAsync("_ProductManufacturers", Model.ProductManufacturers)

                        @await Html.PartialAsync("_Discontinued", Model)
                        <div class="product-name">
                            <h1>@Model.Name</h1>
                            <h2>@Model.Name</h2>
                        </div>
                        @if (!string.IsNullOrEmpty(Model.ShortDescription))
                        {
                            <div class="description-section">
                                <div class="hidden-menu" style="display: none;">
                                    @Html.Raw("<p>" + Model.ShortDescription + " </p><a onclick = 'hidefullText(this)' > Read Less </a> ")
                                </div>
                                <div class="show-menu">
                                    @{
                                        string[] words = Model.ShortDescription.Split(new char[] { ' ', '\t', '\n', '\r' }, StringSplitOptions.RemoveEmptyEntries);
                                        string result = "<p>" + string.Join(" ", words.Take(100));
                                        result += " ...";
                                        result += "</p><a onclick='showfullText(this)'>Read more</a>";
                                    }
                                    @Html.Raw(result)
                                </div>
                            </div>

                            <script asp-location="Footer">
                                function showfullText(e) {
                                var ele = $(e).parent().parent().find(".hidden-menu");
                                ele.slideToggle('slow');
                                $(e).parent().slideToggle('slow');
                                }

                                function hidefullText(e) {
                                var ele = $(e).parent().parent().find(".show-menu");
                                ele.slideToggle('slow');
                                $(e).parent().slideToggle('slow');

                                }
                            </script>
                        }

                        <div class="endoresement">
                            <div class="hidden-menu" style="display: none;">
                                @Html.Raw("<p>" + Model.ShortDescription + " </p><a onclick = 'hidefullText(this)' > Read Less </a> ")
                            </div>
                            <div class="show-menu">
                                @{
                                    string[] words1 = Model.ShortDescription.Split(new char[] { ' ', '\t', '\n', '\r' }, StringSplitOptions.RemoveEmptyEntries);
                                    string result1 = "<p>" + string.Join(" ", words1.Take(100));
                                    result1 += " ...";
                                    result1 += "</p><a onclick='showfullText(this)'>Read more</a>";
                                }
                                @Html.Raw(result1)
                            </div>
                        </div>

                        <script asp-location="Footer">
                            function showfullText(e) {
                            var ele = $(e).parent().parent().find(".hidden-menu");
                            ele.slideToggle('slow');
                            $(e).parent().slideToggle('slow');
                            }

                            function hidefullText(e) {
                            var ele = $(e).parent().parent().find(".show-menu");
                            ele.slideToggle('slow');
                            $(e).parent().slideToggle('slow');

                            }
                        </script>
                        <div class="productviewbookdetail">
                            <ul class="p-0">
                                @{
                                    var (name, value) = await bookHelpers.GetProductSpecificationAttributeAsync(Model.Id, "Imprint");
                                    <li>@name : @value</li>
                                }
                            </ul>

                        </div>
                        @await Component.InvokeAsync(typeof(WidgetViewComponent), new { widgetZone = PublicWidgetZones.ProductDetailsOverviewTop, additionalData = Model })
                        <!--product reviews-->
                        @await Html.PartialAsync("_ProductReviewOverview", Model.ProductReviewOverview)
                        <!--availability-->
                        @await Html.PartialAsync("_Availability", Model)
                        <!--SKU, MAN, GTIN, vendor-->
                        @* @await Html.PartialAsync("_SKU_Man_GTIN_Ven", Model) *@
                        <!--delivery-->
                        @await Html.PartialAsync("_DeliveryInfo", Model)
                        <!--sample download-->
                        @await Html.PartialAsync("_DownloadSample", Model)
                        <div class="row formatAndAddtoCartSection">
                            <div class="col-12 col-md-6">
                                <!--attributes-->
                                @{
                                    var dataDictAttributes = new ViewDataDictionary(ViewData);
                                    dataDictAttributes.TemplateInfo.HtmlFieldPrefix = $"attributes_{Model.Id}";
                                    @await Html.PartialAsync("_ProductAttributes", Model, dataDictAttributes)

                                    var dataDictPrice = new ViewDataDictionary(ViewData);
                                    dataDictPrice.TemplateInfo.HtmlFieldPrefix = $"price_{Model.Id}";
                                    @await Html.PartialAsync("_ProductPrice", Model.ProductPrice, dataDictPrice)
                                    <div class="text-center">
                                        <span class="isbn-text">ISBN:9780824517809</span>
                                    </div>
                                }
                            </div>
                            <div class="col-12 col-md-6">
                                <!--price & add to cart & estimate shipping-->
                                @{

                                    @await Component.InvokeAsync(typeof(WidgetViewComponent), new { widgetZone = PublicWidgetZones.ProductPriceTop, additionalData = Model })

                                    @await Component.InvokeAsync(typeof(WidgetViewComponent), new { widgetZone = PublicWidgetZones.ProductPriceBottom, additionalData = Model })

                                    @await Html.PartialAsync("_ProductTierPrices", Model.TierPrices)

                                    var dataDictAddToCart = new ViewDataDictionary(ViewData);
                                    dataDictAddToCart.TemplateInfo.HtmlFieldPrefix = $"addtocart_{Model.Id}";
                                    @await Html.PartialAsync("_AddToCart", Model.AddToCart, dataDictAddToCart)

                                    @await Html.PartialAsync("_ProductEstimateShipping", Model.ProductEstimateShipping)
                                    <!--wishlist, compare, email a friend-->
                                    <div class="overview-buttons">
                                        @await Component.InvokeAsync(typeof(WidgetViewComponent), new { widgetZone = PublicWidgetZones.ProductDetailsInsideOverviewButtonsBefore, additionalData = Model })
                                        @{
                                            var dataDictAddToWishlist = new ViewDataDictionary(ViewData);
                                            dataDictAddToWishlist.TemplateInfo.HtmlFieldPrefix = $"addtocart_{Model.Id}";
                                            @await Html.PartialAsync("_AddToWishlist", Model.AddToCart, dataDictAddToWishlist)
                                        }
                                        @*@await Html.PartialAsync("_CompareProductsButton", Model)*@
                                        @* @await Html.PartialAsync("_ProductEmailAFriendButton", Model)*@
                                        @await Component.InvokeAsync(typeof(WidgetViewComponent), new { widgetZone = PublicWidgetZones.ProductDetailsInsideOverviewButtonsAfter, additionalData = Model })
                                    </div>
                                    @await Html.PartialAsync("_ShareButton", Model)
                                    <div class="product-bulk-email">
                                        <span>
                                            For bulk and special orders please email <br />
                                            <a href="mailto:@T("Product.Details.BulkContactEmail")">@T("Product.Details.BulkContactEmail")</a>
                                        </span>
                                    </div>
                                }
                            </div>
                        </div>
                        <!--gift card-->
                        @{
                            var dataDictGiftCard = new ViewDataDictionary(ViewData);
                            dataDictGiftCard.TemplateInfo.HtmlFieldPrefix = $"giftcard_{Model.Id}";
                            @await Html.PartialAsync("_GiftCardInfo", Model.GiftCard, dataDictGiftCard)
                        }
                        <!--rental info-->
                        @{
                            var dataDictRental = new ViewDataDictionary(ViewData);
                            dataDictRental.TemplateInfo.HtmlFieldPrefix = $"rental_{Model.Id}";
                            @await Html.PartialAsync("_RentalInfo", Model, dataDictRental)
                        }

                        @await Component.InvokeAsync(typeof(WidgetViewComponent), new { widgetZone = PublicWidgetZones.ProductDetailsOverviewBottom, additionalData = Model })
                    </div>
                    @await Component.InvokeAsync(typeof(WidgetViewComponent), new { widgetZone = PublicWidgetZones.ProductDetailsEssentialBottom, additionalData = Model })
                </div>
                @await Component.InvokeAsync(typeof(WidgetViewComponent), new { widgetZone = PublicWidgetZones.ProductDetailsBeforeCollateral, additionalData = Model })
                <div class="product-collateral">
                    <ul class="nav nav-tabs justify-content-center justify-content-md-start" id="productInfoTab" role="tablist">
                        @{
                            var hasSpecification = await Html.PartialAsync("_ProductSpecifications", Model.ProductSpecificationModel);
                        }
                        @if (!string.IsNullOrWhiteSpace(await hasSpecification.RenderHtmlContentAsync()))
                        {
                            <li class="nav-item" role="presentation">
                                <button class="nav-link active" id="specs-tab" data-bs-toggle="tab" data-bs-target="#specs-tab-pane" type="button" role="tab" aria-controls="specs-tab-pane" aria-selected="false">
                                    Specification
                                </button>
                            </li>
                        }
                        <li class="nav-item" role="presentation">
                            <button class="nav-link" id="author-tab" data-bs-toggle="tab" data-bs-target="#author-tab-pane" type="button" role="tab" aria-controls="author-tab-pane" aria-selected="false">
                                About the author
                            </button>
                        </li>
                        @if (!string.IsNullOrEmpty(Model.FullDescription))
                        {
                            <li class="nav-item" role="presentation">
                                <button class="nav-link" id="full-description-tab" data-bs-toggle="tab" data-bs-target="#full-description-tab-pane" type="button" role="tab" aria-controls="full-description-tab-pane" aria-selected="false">
                                    Description
                                </button>
                            </li>
                        }
                    </ul>
                    <div class="tab-content" id="productInfoTabContent">
                        @if (!string.IsNullOrWhiteSpace(await hasSpecification.RenderHtmlContentAsync()))
                        {
                            <div class="tab-pane fade show active" id="specs-tab-pane" role="tabpanel" aria-labelledby="specs-tab" tabindex="0">
                                @*  @await Html.PartialAsync("_ProductSpecifications", Model.ProductSpecificationModel) *@
                                <div class="row">
                                    <div class="col-md-6 lefttab">
                                        <ul>
                                            @{
                                                await ProductSpecificationAttribute("Title");
                                                await ProductSpecificationAttribute("AuthorNameInverted");
                                                await ProductSpecificationAttribute("AuthoRole");
                                                await ProductSpecificationAttribute("Endorsement");
                                                await ProductSpecificationAttribute("Formats");
                                                await ProductSpecificationAttribute("Imprint");
                                            }
                                        </ul>
                                    </div>
                                    <div class="col-md-6 righttab">
                                        <ul>
                                            @{
                                                await ProductSpecificationAttribute("Keywords");
                                                await ProductSpecificationAttribute("Language");
                                                await ProductSpecificationAttribute("Number of pages");
                                                await ProductSpecificationAttribute("Publication date");
                                                await ProductSpecificationAttribute("PublishingStatus");
                                                await ProductSpecificationAttribute("Table of content");
                                                await ProductSpecificationAttribute("Trim size");
                                                await ProductSpecificationAttribute("Type");
                                            }

                                        </ul>
                                    </div>
                                </div>


                            </div>
                        }
                        <div class="tab-pane fade" id="author-tab-pane" role="tabpanel" aria-labelledby="author-tab" tabindex="0">
                            <div>
                                <h4>David Pocta (Author)</h4>
                                <p>David Pocta is a Christian Spirituality Scholar, ministry builder, and educator. After nearly three decades of pastoral work, he returned to school for his PhD in Christian Contemporary Spirituality. His work blends his experience in pastoral ministry with spirituality scholarship. His research interests include the spiritual journey, spiritual wilderness, contemporary evangelical church culture, and Christian mysticism. His dissertation addressed how the spiritual journey of Christians, when in their own wilderness, exposes the need for a reimagined church culture in Protestant evangelicalism. David is a collaborator and builder. He enjoys creating spaces for honest dialogue and authentic learning. He lives with his wife of more than thirty years in San Antonio and treasures having his daughters, son-in-law, and grandchildren nearby.</p>
                                <div class="text-center text-md-start">
                                    <a class="btn-1">View Products</a>
                                </div>

                            </div>
                            <div>
                                <h4>David Pocta (Author)</h4>
                                <p>David Pocta is a Christian Spirituality Scholar, ministry builder, and educator. After nearly three decades of pastoral work, he returned to school for his PhD in Christian Contemporary Spirituality. His work blends his experience in pastoral ministry with spirituality scholarship. His research interests include the spiritual journey, spiritual wilderness, contemporary evangelical church culture, and Christian mysticism. His dissertation addressed how the spiritual journey of Christians, when in their own wilderness, exposes the need for a reimagined church culture in Protestant evangelicalism. David is a collaborator and builder. He enjoys creating spaces for honest dialogue and authentic learning. He lives with his wife of more than thirty years in San Antonio and treasures having his daughters, son-in-law, and grandchildren nearby.</p>
                                <div class="text-center text-md-start">
                                    <a class="btn-1">View Products</a>
                                </div>
                            </div>
                        </div>
                        <div class="tab-pane fade" id="full-description-tab-pane" role="tabpanel" aria-labelledby="full-description-tab" tabindex="0">
                            @if (!string.IsNullOrEmpty(Model.FullDescription))
                            {
                                <div class="full-description">
                                    @Html.Raw(Model.FullDescription)
                                </div>
                            }
                        </div>
                    </div>
                </div>
                @await Component.InvokeAsync(typeof(ProductsAlsoPurchasedViewComponent), new { productId = Model.Id })
                @await Component.InvokeAsync(typeof(RelatedProductsViewComponent), new { productId = Model.Id })
            </div>
        </form>
        @await Component.InvokeAsync(typeof(WidgetViewComponent), new { widgetZone = PublicWidgetZones.ProductDetailsBottom, additionalData = Model })
    </div>
</div>